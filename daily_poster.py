import os
import json
import datetime
import logging

from dotenv import load_dotenv
from google.cloud import storage
from telegram import Bot

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
logging.basicConfig(level=logging.INFO)

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHANNEL_ID = os.getenv("TELEGRAM_CHANNEL_ID")
GCS_BUCKET_NAME = os.getenv("GCS_BUCKET_NAME")
GCS_FILE_NAME = os.getenv("GCS_FILE_NAME")
GCS_CREDENTIALS_JSON = os.getenv("GCS_CREDENTIALS_JSON")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞ ===
bot = Bot(token=TELEGRAM_TOKEN)

# === –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã (—É—Ç—Ä–æ, –¥–µ–Ω—å, –≤–µ—á–µ—Ä, –Ω–æ—á—å) ===
TIME_SLOTS = {
    'morning': range(1, 2),     # 05:00‚Äì08:59
    'day': range(3, 4),        # 09:00‚Äì12:59
    'afternoon': range(7, 8), # 13:00‚Äì16:59
    'evening': range(11, 12)    # 17:00‚Äì22:59
}

def get_current_slot():
    hour = datetime.datetime.now().hour
    for slot, hours in TIME_SLOTS.items():
        if hour in hours:
            return slot
    return None

def download_json_from_gcs():
    key_str = os.getenv("GCS_KEY_JSON")
    if not key_str:
        raise ValueError("‚ùå GCS_KEY_JSON –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞")

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ .env –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å
    key_dict = json.loads(key_str)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
    with open("gcs_key.json", "w") as f:
        json.dump(key_dict, f)
    os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "gcs_key.json"

    storage_client = storage.Client()
    bucket = storage_client.bucket(GCS_BUCKET_NAME)
    blob = bucket.blob(GCS_FILE_NAME)
    content = blob.download_as_string()
    return json.loads(content)

def post_to_telegram(title, text):
    message = f"<b>{title}</b>\n\n{text}"
    bot.send_message(chat_id=CHANNEL_ID, text=message, parse_mode='HTML')

POSTED_LOG_FILE = "posted_log.json"  # –∏–º—è –æ–±—ä–µ–∫—Ç–∞ –≤ GCS

def load_posted_log_from_gcs():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∂—É—Ä–Ω–∞–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∏–∑ GCS"""
    try:
        key_str = os.getenv("GCS_KEY_JSON")
        if not key_str:
            raise ValueError("‚ùå GCS_KEY_JSON –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞")

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ .env –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å
        key_dict = json.loads(key_str)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
        with open("gcs_key.json", "w") as f:
            json.dump(key_dict, f)
        os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "gcs_key.json"

        storage_client = storage.Client()
        bucket = storage_client.bucket(GCS_BUCKET_NAME)
        blob = bucket.blob(POSTED_LOG_FILE)
        if blob.exists():
            content = blob.download_as_string()
            return json.loads(content)
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∂—É—Ä–Ω–∞–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {e}")
    return {}

def save_posted_log_to_gcs(log):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∂—É—Ä–Ω–∞–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≤ GCS"""
    try:
        key_str = os.getenv("GCS_KEY_JSON")
        if not key_str:
            raise ValueError("‚ùå GCS_KEY_JSON –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞")

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ .env –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å
        key_dict = json.loads(key_str)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
        with open("gcs_key.json", "w") as f:
            json.dump(key_dict, f)
        os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "gcs_key.json"

        storage_client = storage.Client()
        bucket = storage_client.bucket(GCS_BUCKET_NAME)
        blob = bucket.blob(POSTED_LOG_FILE)
        blob.upload_from_string(
            json.dumps(log, ensure_ascii=False, indent=2),
            content_type="application/json"
        )
        logging.info("–ñ—É—Ä–Ω–∞–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ GCS")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∂—É—Ä–Ω–∞–ª–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {e}")

def main():
    try:
        data = download_json_from_gcs()
        today = datetime.datetime.now().strftime('%Y-%m-%d')
        current_slot = get_current_slot()

        if not current_slot:
            logging.info("‚è≥ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã.")
            return

        today_posts = next((item['posts'] for item in data if item['date'] == today), None)
        if not today_posts:
            logging.warning(f"‚ö†Ô∏è –ü–æ—Å—Ç—ã –Ω–∞ –¥–∞—Ç—É {today} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        slot_index = list(TIME_SLOTS.keys()).index(current_slot)

        if slot_index < len(today_posts):
            posted_log = load_posted_log_from_gcs()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            if posted_log.get(today, {}).get(current_slot):
                logging.info(f"‚úÖ –ü–æ—Å—Ç –¥–ª—è {today} –≤ —Å–ª–æ—Ç–µ {current_slot} —É–∂–µ –±—ã–ª –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.")
                return

            post = today_posts[slot_index]
            logging.info(f"üì¢ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞: {post['title']}")
            post_to_telegram(post['title'], post['text'])

            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ñ–∞–∫—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            if today not in posted_log:
                posted_log[today] = {}
            posted_log[today][current_slot] = True
            save_posted_log_to_gcs(posted_log)
        else:
            logging.info(f"‚ÑπÔ∏è –ù–µ—Ç –ø–æ—Å—Ç–∞ –¥–ª—è —Å–ª–æ—Ç–∞ {current_slot}")

    except Exception as e:
        logging.exception(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

if __name__ == "__main__":
    main()
